#!/bin/bash

set -e

# This script is used to set up the server
# It is piped to ssh
DEPLOY_INIT='set -e
echo "CREATING DEPLOYMENT IN $DEPLOY_PATH"
mkdir -p "$DEPLOY_PATH" && cd $_
[ -d .git ] && exit     # If theres already a repo here we"ll assume its already set up

# Create the repo
git init --shared
touch ._deploy_is_new

# Create the push hook
cat <<EOF >.git/hooks/post-receive
#!/bin/bash
set -e
run-script () {
    # check scripts/deploy, script/deploy, and bin/deploy
    local scriptdir=
    if [ -d scripts/deploy ]; then
        scriptdir=scripts/deploy
    elif [ -d script/deploy ]; then
        scriptdir=script/deploy
    elif [ -d bin/deploy ]; then
        scriptdir=bin/deploy
    else
        return 0
    fi

    # Check if the script exists, and if so run it
    local script="\$scriptdir/\$1"
    if [ -x "\$script" ]; then
        "\$script"
    elif [ "\$2" == fail ]; then
        return 1
    fi
}

# We start in GIT_DIR, but we want to operate
# on the working tree
cd ..

if [ -e ._deploy_is_new ]; then
    # This is the first push, so run the appropriate scripts
    rm ._deploy_is_new
    GIT_DIR=.git git merge deploy
    run-script init
    run-script setup
    run-script startup
else
    # Is a re-deploy, so stop the server and run
    # the appropriate restart scripts
    run-script teardown
    GIT_DIR=.git git merge deploy
    if ! run-script update fail; then
        # update script doesnt exist, so use other scripts
        run-script clean
        run-script setup
        run-script startup
    fi
fi
EOF
chmod +x .git/hooks/post-receive'

deploy-create () {
    local remote="$2"
    local ref="$3"

    if [ -n "$ref" ]; then
        # We're indicating that the server isn't set up yet

        # Get server parts from the remote spec
        local server=`echo "$remote" | sed 's|\([^:]*\):.*|\1|'`
        local serverpath=`echo "$remote" | sed 's|[^:]*:\(.*\)|\1|'`

        # Set up the server via SSH
        (echo "DEPLOY_PATH=$serverpath" && echo "$DEPLOY_INIT") | ssh "$server"

        # Reset deploy branch and remote
        (git branch | grep 'deploy') && git branch -D 'deploy'
        (git remote | grep 'deploy') && git remote remove 'deploy'

        # Set up the local deploy branch
        git checkout -b 'deploy' "$ref"

        # Set up deploy remote and first push
        git remote add 'deploy' "$remote/.git"
        git push --set-upstream 'deploy' 'deploy'

        # Return to where we were
        git checkout @{-2}
    else
        # If no ref is passed, we are indicating that the server is
        # already set up and we just need to configure a new client

        # Add the remote and set up the local branch
        git remote add 'deploy' "$remote/.git"
        # deploy deploy deploy/deploy lol
        git fetch 'deploy'
        git branch 'deploy' 'deploy/deploy'
    fi
    echo 'Done!'
}

deploy-exising () {
    local ref="$1"

    # Push the given ref to the server
    git checkout 'deploy'
    git merge "$ref"
    git push

    # Return to where we were
    git checkout -
    echo 'Done!'
}

if [ "$1" == 'to' ]; then
    deploy-create "$@"
else
    deploy-exising "$@"
fi
